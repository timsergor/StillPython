#979. Distribute Coins in Binary Tree. Medium. 67.7%
#Given the root of a binary tree with N nodes, each node in the tree has node.val coins, and there are N coins total.
#In one move, we may choose two adjacent nodes and move one coin from one node to another.  (The move may be from parent to child, or from child to parent.)
#Return the number of moves required to make every node have exactly one coin.

# Definition for a binary tree node.
class TreeNode:
     def __init__(self, x):
         self.val = x
         self.left = None
         self.gight = None

class Solution:
    def distributeCoins(self, root: TreeNode) -> int:
        def mass(Node):
            if Node == None:
                return(0)
            else:
                return(Node.val + mass(Node.left) + mass(Node.right))
        
        def amount(Node):
            if Node == None:
                return(0)
            else:
                return(1 + amount(Node.left) + amount(Node.right))
            
        def flow(Node):
            LR = abs(mass(Node.left) - amount(Node.left)) + abs(mass(Node.right) - amount(Node.right))
            UP = mass(Node) - amount(Node)
            return(UP+LR)
        
        def result(Node):
            if Node == None:
                return(0)
            else:
                return(flow(Node) + result(Node.left) + result(Node.right))
            
        return(result(TreeNode))
